import { app, BrowserWindow, ipcMain, dialog } from "electron";
import { channels } from "./shared/constants";
import fs from "fs";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
console.log(MAIN_WINDOW_WEBPACK_ENTRY, "what is main window webpack entry");
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      contextIsolation: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// Testing ipcMain

const products = {
  notebook: {
    name: "notebook",
    price: "2500",
    color: "gray",
  },
  headphone: {
    name: "headphone",
    price: "700",
    color: "black",
  },
};

ipcMain.on(channels.GET_DATA, (event, arg) => {
  const { product } = arg;
  event.sender.send(channels.GET_DATA, products[product]);
});

// quit the app
ipcMain.handle(channels.QUIT, () => {
  app.quit();
});

// handle Login

ipcMain.on(channels.LOGIN, (event, email, password) => {
  // handle authenticaiton here
  const EMAIL = "test@gmail.com";
  const PASS = "123456";
  const isAuthenticated = email === EMAIL && PASS === password;
  const response = { success: isAuthenticated, code: 200 };

  event.sender.send(channels.LOGIN_RESPONSE, response);
});

// Option + âŒ˜ + I to open dev tools

// file select with dialog
ipcMain.on("chooseFile", async (event, arg) => {
  const result = await dialog.showOpenDialog({
    properties: ["openFile"],
    filters: [{ name: "Images", extensions: ["png", "jpg", "jpeg"] }],
  });

  if (!result.canceled) {
    const filePath = result.filePaths[0];
    const base64 = await fs.promises.readFile(filePath, { encoding: "base64" });
    event.reply("chosenFile", base64);
  }
});
